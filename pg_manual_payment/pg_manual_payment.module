<?php
/**
 * @file
 * Manual Payment.
 *
 * Manual payment with human verification.
 */

/**
 * Implements hook_menu().
 */
function pg_manual_payment_menu() {
  $items['payment/manual_payment/%txnid'] = array(
    'title' => 'Manual Payment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pg_manual_payment_payform', 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/pgapi/gateway_settings/manual_payment'] = array(
    'title' => 'Manual Payment',
    'description' => 'Manual Payment payment settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pg_manual_payment_list'),
    'access callback' => 'user_access',
    'access arguments' => array('administer pgapi'),
    'file' => 'pg_manual_payment.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/pgapi/gateway_settings/manual_payment/list'] = array(
    'title' => 'Manual Payment',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/pgapi/gateway_settings/manual_payment/add'] = array(
    'title' => 'Add Account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pg_manual_payment_add'),
    'access callback' => 'user_access',
    'access arguments' => array('administer pgapi'),
    'file' => 'pg_manual_payment.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/pgapi/gateway_settings/manual_payment/edit/%'] = array(
    'title' => 'Edit Wallet',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pg_manual_payment_edit', 6),
    'access callback' => 'user_access',
    'access arguments' => array('administer pgapi'),
    'file' => 'pg_manual_payment.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/pgapi/gateway_settings/manual_payment/settings'] = array(
    'title' => 'Settings',
    'description' => 'Manual Payment Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pg_manual_payment_settings'),
    'access arguments' => array('administer pgapi'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'pg_manual_payment.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_mail().
 */
function pg_manual_payment_mail($key, &$message, $params) {
  $language = $message['language'];
  // @FIXME In Drupal 7, this function has other parameters.
  $variables = user_mail_tokens($params['user'], $language);

  $variables['!purse'] = $params['payment_method']->purse;
  $t = $params['t'];
  $variables['!txnid'] = $t->txnid;

  $format = module_invoke($t->type, 'pgapi_format_price');
  $formated_price = number_format($t->extra['prices'][$t->extra['wallet']], $format['decimals'], $format['dec_point'], $format['thousands_sep']);
  $formated = theme('pgapi_format_price_plain', $formated_price, $params['payment_method']->symbol, $format['position']);

  $variables['!price'] = $formated;

  switch ($key) {
    case 'notice':
      $message['subject'] = t('Payment Notification from !site', $variables, $language->language);
      $message['body'][] = t("Dear !username\n" .
        "Your Payment #!txnid will be checked today.\n\n" .
        "Amount: !price\n" .
        "Payment Account: !purse\n\n" .
        "Best regards,\n" .
        "!site", $variables, $language->language);
      break;

    case 'notice_admin':
      $message['subject'] = t('Payment Notification from !site', $variables, $language->language);
      $message['body'][] = t("Dear Admin\n" .
        "User !username just sent a payment #!txnid\n\n" .
        "Amount: !price\n" .
        "Payment Account: !purse\n\n" .
        "Please check it out and process it.\n\n" .
        "Best regards,\n" .
        "!site", $variables, $language->language);
      break;
  }
}

/**
 * Implements hook_pgapi_gw().
 */
function pg_manual_payment_pgapi_gw($op, $a3 = NULL) {
  switch ($op) {
    case 'display name':
      $ret = t('Manual Payment Payment Gateway');
      break;

    case 'payment page':
      $ret = url('payment/manual_payment/' . $a3, array('absolute' => TRUE));
      break;

    case 'payment gateway info':
      $ret['name'] = t('Manual Payment');

      $result = db_select('pg_manual_payment_accounts', 'a')
        ->fields('a', array('name', 'rate', 'symbol'))
        ->orderBy('name')
         ->execute()
        ->fetchAll();

      $prices = array();
      foreach ($result as $rr) {
        $prices[$rr->name] = $a3 * $rr->rate . ' ' . $rr->symbol;
      }

      $ret['price'] = $prices;
      break;

    case 'ajax_form':
      $t = $a3;

      return array(
        'element' => pg_manual_payment_get_wallets($t),
        'submit' => 'pg_manual_payment_submit',
      );
  }

  return $ret;
}

/**
 * Implements hook_pgapi_transaction().
 */
function pg_manual_payment_pgapi_transaction($status, $t) {
  switch ($status) {
    case PG_PENDING:
      $result = db_select('pg_manual_payment_accounts', 'a')
        ->fields('a', array('paid', 'rate'))
        ->orderBy('name')
        ->execute()
        ->fetchAll();

      $prices = array();
      foreach ($result as $rr) {
        $prices[$rr->paid] = round(($t->amount * $rr->rate), 2);
      }

      $t->extra['prices'] = $prices;
      break;
  }
}

/**
 * Implements hook_FORMID().
 */
function pg_manual_payment_get_wallets($t) {
  $templates = db_select('pg_manual_payment_accounts', 'a')
    ->fields('a')
    ->orderBy('name')
    ->execute()
    ->fetchAll();

  $first = TRUE;
  foreach ($templates as $template) {
    if ($first) {
      $first = FALSE;
      $def_purse = $template->paid;
    }

    $purses[$template->paid] = ($t->amount * $template->rate) . " <span class='symbol'>" . $template->symbol . "</span>";
  }

  $form['wallet'] = array(
    '#type' => 'radios',
    '#title' => t('Type of account'),
    '#options' => $purses,
    '#default_value' => $def_purse,
    '#description' => t("What type of currency will be used."),
  );

  return $form;
}

function pg_manual_payment_submit($form, $form_state) {
  $form = drupal_build_form('pg_manual_payment_payform', $form_state);
  $output = drupal_render($form);

  echo '<html><body>' . $output . '<script>pgpayform.submit();</script></body>';
  drupal_exit();
}

/**
 * Implements hook_FORMID().
 */
function pg_manual_payment_payform($form, $form_state) {
  global $user;

  $values = $form_state['values'];
  $t = pgapi_transaction_load($values['txnid']);

  if ($user->uid != 1 and $user->uid != $t->uid) {
    drupal_access_denied();
  }

  $wallet = $values['pgapi_wrapper']['wallet'];

  $account = db_select('pg_manual_payment_accounts', 'a')
    ->fields('a')
    ->condition('paid', $wallet)
    ->execute()
    ->fetchObject();

  $form['txnid'] = array(
    '#type' => 'value',
    '#value' => $t->txnid,
  );

  $form['payment'] = array(
    '#type' => 'fieldset',
    '#title' => t('Manual Payment'),
    '#description' => t('Please make a payment and click submit'),
  );

  $form['payment']['account'] = array(
    '#type' => 'textfield',
    '#title' => $account->name,
    '#value' => $account->purse,
    '#description' => t('Please send your payment on this wallet'),
  );

  $form['payment']['ammount'] = array(
    '#type' => 'textfield',
    '#title' => t('Ammount'),
    '#value' => $t->extra['prices'][$wallet],
    '#description' => t('Please send your payment on this wallet'),
  );

  $sitename = variable_get('site_name', 'Drupal');
  $desc = t('Purchase for site !sitename. Transaction !txnid', array(
    '!sitename' => $sitename,
    '!txnid' => $t->txnid,
  ));

  $form['payment']['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Payment description'),
    '#value' => $desc,
    '#description' => t('Please put this description'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  $form['#submit'][] = 'pg_manual_payment_payform_submit';

  return $form;
}

/**
 * Implements hook_FORMID_submit().
 */
function pg_manual_payment_payform_submit($form, &$form_state) {
  $t = pgapi_transaction_load($form_state['values']['txnid']);
  $user = user_load($t->uid);

  $account = db_select('pg_manual_payment_accounts', 'a')
    ->fields('a')
    ->condition('paid', $t->extra['wallet'])
    ->execute()
    ->fetchObject();

  $params['t'] = $t;
  $params['user'] = $user;
  $params['payment_method'] = $account;

  drupal_mail('pg_manual_payment', 'notice', $t->email, user_preferred_language($user), $params);
  $admin_mail = variable_get('pg_manual_payment_email', '');

  if (!empty($admin_mail)) {
    drupal_mail('pg_manual_payment', 'notice_admin', $admin_mail, user_preferred_language($user), $params);
  }

  drupal_set_message(t('Your payment will be checked soon. You will receive email notification.'));
}
