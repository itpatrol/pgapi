<?php
// $Id: pgapi.module,v 1.9 2010/10/31 04:43:24 gor Exp $
/********************************************************************
 * Constants
 ********************************************************************/
/* No payment information has been recieved. */
define('PG_PENDING', 1);

/* Payment has been completed and confirmed and money has been transfered. */
define('PG_COMPLETED', 2);

/* Payment failed. */
define('PG_FAILED', 3);

/* Payment has been denied. */
define('PG_DENIED', 4);

/* Payment has been refunded. */
define('PG_REFUNDED', 5);

/* Payment has been canceled. */
define('PG_CANCELED', 6);

/* Payment recieved but not confirmed. */
define('PG_RECEIVED', 7);

/* The transaction has been received. */
define('PG_WORKFLOW_RECEIVED', 1);

/* Transaction has been invoiced.  This means an invoice has been printed or viewed. */
define('PG_WORKFLOW_INVOICED', 2);

/* The transaction has been shipped. */
define('PG_WORKFLOW_SHIPPED', 3);

/* The transaction is awaiting a customer responce before it can continue. */
define('PG_WORKFLOW_AWAITING_RESPONSE', 4);

/* The transaction has been canceled. */
define('PG_WORKFLOW_CANCELED', 5);

/* The transaction is completed. */
define('PG_WORKFLOW_COMPLETED', 6);

/* A security violation has been detected and the transaction has been taken out
 * of the general workflow and flagged. */
define('PG_WORKFLOW_SECURITY_VIOLATION', 7);


/********************************************************************
 * Drupal Hooks
 ********************************************************************/

/**
 * Implementation of hook_mail().
 */
function pgapi_mail($key, &$message, $params) {

	$language = $message['language'];
	$variables = user_mail_tokens($params['user'], $language);
	
	$t=$params['t'];
	$variables['!txnid'] = $t->txnid;
	$variables['!pg_amount'] = $t->amount;

	$variables['!pg_type'] = $t->type;
	$variables['!pg_method'] = $t->method;
  $variables['!status'] = pgapi_get_status($t->status);
  $variables['!workflow'] = pgapi_get_workflow($t->workflow);

  
	switch($key) {
		case PG_PENDING:
				$message['subject'] = t('New Payment Notification from !site', $variables, $language->language);
				$message['body'][] = t("Dear !username
Payment #!txnid has been created.

Amount: !pg_amount
Type: !pg_type
Method: !pg_method

Best regards,
!site
", $variables, $language->language);
			break;
    default:
    		$message['subject'] = t('Payment !txnid Change Notification from !site', $variables, $language->language);
				$message['body'][] = t("Dear !username
Payment #!txnid has been changed.

Amount: !pg_amount
Type: !pg_type
Method: !pg_method
Status: !status
Workflow: !workflow

Best regards,
!site
", $variables, $language->language);
	}
}


/**
 * Implementation of hook_init().
 */
function pgapi_init() {
  drupal_add_css(drupal_get_path('module', 'pgapi') .'/pgapi.css');
}

/**
 * IMenu callback; loads a txnid object
 */
function txnid_load($txnid) {
  $txnid=(int)$txnid;
  return pgapi_transaction_load($txnid);
}

/**
 * Implementation of hook_perm().
 */
function pgapi_perm() {
  return array('administer pgapi');
}

/**
 * Implementation of hook_theme()
 */
function pgapi_theme() {
   return array(
    'pgapi_common' => array(
      'arguments' => array('form' => NULL),
    ),
    'pgapi_payment' => array(
      'arguments' => array('form' => NULL),
    ),
    'pgapi_gateway_price' => array(
      'arguments' => array('prices' => array(), 'type' => NULL),
    ),
    'pgapi_history_filters' => array(
      'arguments' => array('form' => NULL),
    ),
    'pgapi_format_price' => array(
      'arguments' => array('price' => NULL,'symbol' => NULL,'position' => NULL),
    ),
    'pgapi_format_price_plain' => array(
      'arguments' => array('price' => NULL,'symbol' => NULL,'position' => NULL),
    ),

    'pgapi_gateway_select_form' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
 * Implementation of hook_menu()
 */

function pgapi_menu() {
  $items['payment/%txnid'] = array(
      'title'            => 'Payment Gateway',
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('pgapi_payment',1),
      'access callback'  => TRUE,
      'type'             => MENU_CALLBACK,
  );
  $items['payment/form_load_js/%txnid'] = array(
      'title'            => 'Payment Gateway Extra Form Load',
      'page callback'    => 'pgapi_extra_form_load_js',
      'page arguments'   => array(2),
      'access callback'  => TRUE,
      'type'             => MENU_CALLBACK,
  );
  $items['admin/pgdata'] = array(
      'title'            => 'Payment Gateway API Tools',
      'description'      => "Manage Payment Gateway API's Tools.",
      'page callback'    => 'pgapi_pgdata',
      'access callback'  => 'user_access',
      'access arguments' => array('administer pgapi'),
      'file'             => 'pgapi.admin.inc',
      'type'             => MENU_NORMAL_ITEM,
  );  
  $items['admin/pgdata/pgsettings'] = array(
      'title'            => 'Payment Gateway API Settings',
      'description'      => 'Configure default settings for Payment Gateway API.',
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('pgapi_common'),
      'access callback'  => 'user_access',
      'access arguments' => array('administer pgapi'),
      'file'             => 'pgapi.admin.inc',
      'type'             => MENU_NORMAL_ITEM,
  );
  $items['admin/pgdata/pgsettings/common'] = array(
      'title'            => 'Common',
      'weight'           => -10,
      'type'             => MENU_DEFAULT_LOCAL_TASK,
  );

  return $items;
}

/********************************************************************
 * API Functions
 ********************************************************************/

function pgapi_GetBackUrl($t){
  $goto = module_invoke($t->type, 'pgapi_callback',$t);
  return $goto;
}

function pgapi_format_price($type,$price,$symbol){

  if($format = module_invoke($type, 'pgapi_format_price')){
    $formated_price = number_format($price,$format['decimals'],$format['dec_point'],$format['thousands_sep']);
    $formated = theme('pgapi_format_price',$formated_price,$symbol,$format['position']);
  }else{
    $formated_price = number_format($price,2,'.',',');
    $formated = theme('pgapi_format_price',$formated_price,$symbol,TRUE);
  }
  return $formated;
}

function pgapi_format_price_plain($type,$price,$symbol){

  if($format = module_invoke($type, 'pgapi_format_price')){
    $formated_price = number_format($price,$format['decimals'],$format['dec_point'],$format['thousands_sep']);
    $formated = theme('pgapi_format_price_plain',$formated_price,$symbol,$format['position']);
  }else{
    $formated_price = number_format($price,2,'.',',');
    $formated = theme('pgapi_format_price_plain',$formated_price,$symbol,TRUE);
  }
  return $formated;
}


function pgapi_getActivePG(){
  return variable_get('pgapi_gw',array());
}


function pgapi_isReadyToProcess($amount){
  $pgapi_gw=pgapi_getActivePG();
  if(is_array($pgapi_gw)){
    foreach ($pgapi_gw as $module => $checked) {
      if($checked){
        if ($module_data= module_invoke($module, 'pgapi_gw','payment gateway info',$amount)) {
          if(!empty($module_data['price'])){
            return TRUE;
          }
        }
      }
    }//foreach
  }
  return FALSE;
}

function pgapi_transaction_save (&$t){
  global $user;
  $t->is_new = FALSE;
  if (!isset($t->changed)) {
    $t->changed = time();
  }
  if (!isset($t->uid)) {
    $t->uid = $user->uid;
    $t->email= $user->mail;
  }
  if (!isset($t->email) && $user->uid > 0) {
    $t->email= $user->mail;
  }

  if (!isset($t->txnid)) { //create
    if (!isset($t->created)) {
      $t->created = time();
      $t->changed = $t->created;
    }

    if (!isset($t->status)) {
      /* Default payment status is pending. */
      $t->status = pgapi_get_status_id('pending');
    }
    if (!isset($t->workflow)) {
      $t->workflow = pgapi_get_workflow_id('received');
    }

    $t->is_new = TRUE;
  }
  $admin_mail=variable_get('pgapi_email','');
  if(empty($admin_mail)){
    $admin_mail=variable_get('site_mail','');
  }
  
  if ($t->is_new) {
    $t->extra=serialize($t->extra);
    //module_invoke_all('pgapi_transaction', $t->status,$t);
    drupal_write_record('pgapi_transaction', $t);
    $params['t']=$t;
    drupal_mail('pgapi', $t->status, $admin_mail, user_preferred_language($user), $params);
    
  }else {
    //module_invoke_all('pgapi_transaction', $t->status,$t);
    if (function_exists($function = $t->type .'_pgapi_transaction')) {
      $function($t->status,$t);
    }
    if (function_exists($function = $t->method .'_pgapi_transaction')) {
      $function($t->status,$t);
    }
    
    $t->extra=serialize($t->extra);
    drupal_write_record('pgapi_transaction', $t, 'txnid');
    $params['t']=$t;
    drupal_mail('pgapi', $t->status, $admin_mail, user_preferred_language($user), $params);
  }
  $t->extra=unserialize($t->extra);
  module_invoke_all('pgapi_transaction_all', $t->status,$t);
  return $t;
}

function pgapi_transaction_load($txnid) {
  $t = db_fetch_object(db_query("SELECT * FROM {pgapi_transaction} AS st WHERE st.txnid = '%d'", $txnid));
  $t->extra=unserialize($t->extra);
  return $t;
}

function pgapi_transaction_delete($txnid) {
  db_query("DELETE FROM {pgapi_transaction} WHERE txnid = '%d'", $txnid);
}


function pgapi_build_method(){
 foreach (module_implements('pgapi_gw') as $module) {
    if ($module_name= module_invoke($module, 'pgapi_gw','display name')) {
      $methods[$module]= $module_name;
    }
  }
  return $methods;
}

function pgapi_get_method_name($module) {
  $module_name= module_invoke($module, 'pgapi_gw','display name');
  return $module_name;
}

function pgapi_build_status() {
  $status = array (
    PG_PENDING   => t('pending'),
    PG_COMPLETED => t('completed'),
    PG_FAILED    => t('failed'),
    PG_DENIED    => t('denied'),
    PG_REFUNDED  => t('refunded'),
    PG_CANCELED  => t('canceled'),
    PG_RECEIVED  => t('received'),
  );

  return $status;
}

function pgapi_get_status($id) {
  $status = pgapi_build_status();
  return $status[$id];
}

function pgapi_get_status_id($name) {
  return array_search(strtolower(t($name)), pgapi_build_status());
}

function pgapi_build_workflow() {
  $workflow = array (
    PG_WORKFLOW_RECEIVED   => t('received'),
    PG_WORKFLOW_INVOICED  => t('invoiced'),
    PG_WORKFLOW_SHIPPED => t('shipped'),
    PG_WORKFLOW_AWAITING_RESPONSE    => t('awaiting customer response'),
    PG_WORKFLOW_CANCELED    => t('canceled'),
    PG_WORKFLOW_COMPLETED  => t('completed'),
    PG_WORKFLOW_SECURITY_VIOLATION  => t('security violation'),
  );
  return $workflow;
}

function pgapi_get_workflow($id) {
  $workflow = pgapi_build_workflow();
  return $workflow[$id];
}

function pgapi_get_workflow_id($name) {
  return array_search(strtolower(t($name)), pgapi_build_workflow());
}

/********************************************************************
 * Callback functions
 ********************************************************************/

function pgapi_payment (&$form_state,$t){
  global $user;
  if(($user->uid != 1 && $user->uid != $t->uid) OR ($t->status != PG_PENDING) OR ($t->workflow != PG_WORKFLOW_RECEIVED)){
    drupal_access_denied();
  }
  $pgapi_gw=pgapi_getActivePG();
  $default='';

  if(is_array($pgapi_gw)){
    foreach ($pgapi_gw as $module => $checked) {
      if($checked){
        if ($module_data= module_invoke($module, 'pgapi_gw','payment gateway info',$t->amount,$t)) {
          
          if($t->method == $module){
            $default=$t->method;
          }
          $form[$module]['modulename']=array (
            '#value' => $module_data['name'],
          );
          $options[$module]='';
          if(empty($default))
             $default=$module;
          $form[$module]['price']=array (
          '#value' => theme('pgapi_gateway_price',$module_data['price'],$t->type),
          );
        }
      }
      if(empty($default)){
        $default=current($options);
      }
      $form['method']=array(
        '#type'    => 'radios',
        '#options' => $options,
        '#default_value' =>$default,
        '#ahah'   => array(
           'path'    => 'payment/form_load_js/'.$t->txnid,
           'wrapper' => 'pgapi-wrapper-form',
           'method'  => 'replace',
           'effect'  => 'slide',
           'progress' => array('type' => 'throbber', 'message' => t('Please wait...')),
        ),
      );
    }
  }
  
  $form['pgapi_wrapper'] = array(
    '#prefix' => '<div id="pgapi-wrapper-form">',
    '#suffix' => '</div>',
    '#tree' => TRUE,
  );
  
  if(!empty($default)){
    $extra_form=module_invoke($default, 'pgapi_gw','get form', $t,$form_state);
    if(is_array($extra_form)){
      $form['pgapi_wrapper'] += $extra_form;
    }
  }  
  $form['#tree']=TRUE;

  $form['txnid']=array(
    '#type'  => 'value',
    '#value' => $t->txnid,
  );
  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Process purchase'),
  );
  $form['cancel'] = array(
    '#type'  => 'submit',
    '#value' => t('Cancel purchase'),
  );
  return $form;
}


function pgapi_payment_submit($form, &$form_state) {
  if($form_state['values']['op'] == $form_state['values']['submit']){
    $t=pgapi_transaction_load($form_state['values']['txnid']);
    $t = module_invoke($form_state['values']['method'], 'pgapi_gw','process form',$t ,$form_state['values']['pgapi_wrapper']);
    $form_state['redirect'] =  pgapi_GetBackUrl($t);
  }elseif($form_state['values']['op'] == $form_state['values']['cancel']){
    $t=pgapi_transaction_load($form_state['values']['txnid']);
    $t->status= PG_CANCELED ;
    $t->workflow = PG_WORKFLOW_CANCELED;
    $t->description = t('User has canceled payment');
    pgapi_transaction_save($t);
    $form_state['redirect'] =  pgapi_GetBackUrl($t);
  }
}

function pgapi_extra_form_load_js($t){
  global $user;
  $output = '';
  
  $cached_form_state = array();
  
  // Load the form from the Form API cache.
  $cached_form = form_get_cache($_POST['form_build_id'], $cached_form_state);
  
  if(!empty($cached_form) and (isset($cached_form['pgapi_fieldset']['pgapi_wrapper']) or  isset($cached_form['pgapi_wrapper']) )){
    
    $form_state = array('values' => $_POST);
    $form=module_invoke($_POST['method'], 'pgapi_gw','get form', $t,$form_state);

    if( isset($cached_form['pgapi_wrapper'])){

      $cached_form['pgapi_wrapper'] = array_merge($cached_form['pgapi_wrapper'], $form);
      form_set_cache($_POST['form_build_id'], $cached_form, $cached_form_state);
      
    }else{
      $cached_form['pgapi_fieldset']['pgapi_wrapper'] = array_merge($cached_form['pgapi_fieldset']['pgapi_wrapper'], $form);
      form_set_cache($_POST['form_build_id'], $cached_form, $cached_form_state);
      
    }
  
  }else{
    form_set_error('form_token', t('Validation error, please try again. If this error persists, please contact the site administrator.').print_r($cached_form,true));
    $output = theme('status_messages');
    print drupal_to_js(array('status' => TRUE, 'data' => $output));
    exit();
  }

  $form += array(
    '#post' => $_POST,
    '#programmed' => FALSE,
    '#tree' => TRUE,
    '#parents' => array('pgapi_wrapper'),
  );

  $form_state = array('submitted' => FALSE);
  $form = form_builder('pgapi_extra_form', $form, $form_state);
  
  $javascript=drupal_add_js(NULL, NULL, 'header');
  if(is_array($javascript['setting'])){
    $embed_prefix = "\n<!--//--><![CDATA[//><!--\n";
    $embed_suffix = "\n//--><!]]>\n";    
    $setting ='<script type="text/javascript">' . $embed_prefix . 'jQuery.extend(Drupal.settings, '. drupal_to_js(call_user_func_array('array_merge_recursive', $javascript['setting'])) .");". $embed_suffix ."</script>\n";
  }
  $output .= $setting.theme('status_messages') . drupal_render($form);
  print drupal_to_js(array('status' => TRUE, 'data' => $output));
  exit;
}


/********************************************************************
 * Functions theme
 ********************************************************************/
 
function theme_pgapi_gateway_select_form(&$form){
   $header = array(
    '',
    t('Payment Gateway'),
    t('Price'),
  );
  foreach ($form as $name => $element) {
    $row = array();
    if (is_array($form[$name]['modulename'])) {
      $row[] = drupal_render($form['method'][$name]);
      $row[] = drupal_render($form[$name]['modulename']);
      $row[] = drupal_render($form[$name]['price']);
      $rows[] = $row;
    }
  }
  if(empty($rows)){
    $rows[] = array(array('data' => t('No payment gateway available.'), 'colspan' => '3'));
  }
  $output .= drupal_render($form['message']);
  $output .= theme('table', $header, $rows);
  $output .= drupal_render($form);
  return $output;

}


function theme_pgapi_format_price($price, $symbol, $position=FALSE){
  if($position){
    $output = '<div class="price"> <span class="symbol">'.$symbol.'</span> '.$price.'</div>';
  }else {
    $output = '<div class="price">'.$price.' <span class="symbol">'.$symbol.'</span> </div>';
  }
  return $output;
}

function theme_pgapi_format_price_plain($price, $symbol, $position=FALSE){
  if($position){
    $output = $symbol.' '.$price;
  }else {
    $output = $price.' '.$symbol;
  }
  return $output;
}


function theme_pgapi_gateway_price($prices, $type){
  $output = '';
  if(is_array($prices)){
    foreach($prices as $cur => $gross){
      if(is_array($gross)){
        $output .= "<div style='float:left;'>".$cur."&nbsp</div>".pgapi_format_price($type,$gross['price'],$gross['currency']);
      }else{
        $output .= pgapi_format_price($type,$gross,$cur);
      }
    }
  }
  return $output;
}

function theme_pgapi_common($form){
  $header = array(
    t('Active'),
    t('Payment Gateway'),
  );

  foreach (element_children($form) as $key) {
    $row = array();

    if (is_array($form[$key]['checkbox'])) {
      $row[] = drupal_render($form[$key]['checkbox']);
      $row[] = drupal_render($form[$key]['modulename']);
      $rows[] = $row;
    }
  }
  if(empty($rows)){
    $rows[] = array(array('data' => t('No payment gateway available.'), 'colspan' => '2'));
  }

  $output = theme('table', $header, $rows);
  $output .= drupal_render($form);
  return $output;
}

function theme_pgapi_payment($form){
  $header = array(
    '',
    t('Payment Gateway'),
    t('Price')
  );

  foreach ($form as $name => $element) {
    $row = array();
    if (is_array($form[$name]['modulename'])) {
      $row[] = drupal_render($form['method'][$name]);
      $row[] = drupal_render($form[$name]['modulename']);
      $row[] = drupal_render($form[$name]['price']);
      $rows[] = $row;
    }
  }
  if(empty($rows)){
    $rows[] = array(array('data' => t('No payment gateway available.'), 'colspan' => '3'));
  }

  $output = theme('table', $header, $rows);
  $output .= drupal_render($form);
  return $output;
}